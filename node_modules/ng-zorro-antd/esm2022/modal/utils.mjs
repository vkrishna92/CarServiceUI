/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
export function applyConfigDefaults(config, defaultOptions) {
    return { ...defaultOptions, ...config };
}
export function getValueWithConfig(userValue, configValue, defaultValue) {
    return typeof userValue === 'undefined'
        ? typeof configValue === 'undefined'
            ? defaultValue
            : configValue
        : userValue;
}
export function getConfigFromComponent(component) {
    const { nzCentered, nzMask, nzMaskClosable, nzClosable, nzOkLoading, nzOkDisabled, nzCancelDisabled, nzCancelLoading, nzKeyboard, nzNoAnimation, nzContent, nzFooter, nzZIndex, nzWidth, nzWrapClassName, nzClassName, nzStyle, nzTitle, nzCloseIcon, nzMaskStyle, nzBodyStyle, nzOkText, nzCancelText, nzOkType, nzOkDanger, nzIconType, nzModalType, nzOnOk, nzOnCancel, nzAfterOpen, nzAfterClose, nzCloseOnNavigation, nzAutofocus } = component;
    return {
        nzCentered,
        nzMask,
        nzMaskClosable,
        nzClosable,
        nzOkLoading,
        nzOkDisabled,
        nzCancelDisabled,
        nzCancelLoading,
        nzKeyboard,
        nzNoAnimation,
        nzContent,
        nzFooter,
        nzZIndex,
        nzWidth,
        nzWrapClassName,
        nzClassName,
        nzStyle,
        nzTitle,
        nzCloseIcon,
        nzMaskStyle,
        nzBodyStyle,
        nzOkText,
        nzCancelText,
        nzOkType,
        nzOkDanger,
        nzIconType,
        nzModalType,
        nzOnOk,
        nzOnCancel,
        nzAfterOpen,
        nzAfterClose,
        nzCloseOnNavigation,
        nzAutofocus
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9jb21wb25lbnRzL21vZGFsL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUlILE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxNQUFvQixFQUFFLGNBQTRCO0lBQ3BGLE9BQU8sRUFBRSxHQUFHLGNBQWMsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQzFDLENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQ2hDLFNBQXdCLEVBQ3hCLFdBQTBCLEVBQzFCLFlBQWU7SUFFZixPQUFPLE9BQU8sU0FBUyxLQUFLLFdBQVc7UUFDckMsQ0FBQyxDQUFDLE9BQU8sV0FBVyxLQUFLLFdBQVc7WUFDbEMsQ0FBQyxDQUFDLFlBQVk7WUFDZCxDQUFDLENBQUMsV0FBVztRQUNmLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDaEIsQ0FBQztBQUVELE1BQU0sVUFBVSxzQkFBc0IsQ0FBeUIsU0FBWTtJQUN6RSxNQUFNLEVBQ0osVUFBVSxFQUNWLE1BQU0sRUFDTixjQUFjLEVBQ2QsVUFBVSxFQUNWLFdBQVcsRUFDWCxZQUFZLEVBQ1osZ0JBQWdCLEVBQ2hCLGVBQWUsRUFDZixVQUFVLEVBQ1YsYUFBYSxFQUNiLFNBQVMsRUFDVCxRQUFRLEVBQ1IsUUFBUSxFQUNSLE9BQU8sRUFDUCxlQUFlLEVBQ2YsV0FBVyxFQUNYLE9BQU8sRUFDUCxPQUFPLEVBQ1AsV0FBVyxFQUNYLFdBQVcsRUFDWCxXQUFXLEVBQ1gsUUFBUSxFQUNSLFlBQVksRUFDWixRQUFRLEVBQ1IsVUFBVSxFQUNWLFVBQVUsRUFDVixXQUFXLEVBQ1gsTUFBTSxFQUNOLFVBQVUsRUFDVixXQUFXLEVBQ1gsWUFBWSxFQUNaLG1CQUFtQixFQUNuQixXQUFXLEVBQ1osR0FBRyxTQUFTLENBQUM7SUFDZCxPQUFPO1FBQ0wsVUFBVTtRQUNWLE1BQU07UUFDTixjQUFjO1FBQ2QsVUFBVTtRQUNWLFdBQVc7UUFDWCxZQUFZO1FBQ1osZ0JBQWdCO1FBQ2hCLGVBQWU7UUFDZixVQUFVO1FBQ1YsYUFBYTtRQUNiLFNBQVM7UUFDVCxRQUFRO1FBQ1IsUUFBUTtRQUNSLE9BQU87UUFDUCxlQUFlO1FBQ2YsV0FBVztRQUNYLE9BQU87UUFDUCxPQUFPO1FBQ1AsV0FBVztRQUNYLFdBQVc7UUFDWCxXQUFXO1FBQ1gsUUFBUTtRQUNSLFlBQVk7UUFDWixRQUFRO1FBQ1IsVUFBVTtRQUNWLFVBQVU7UUFDVixXQUFXO1FBQ1gsTUFBTTtRQUNOLFVBQVU7UUFDVixXQUFXO1FBQ1gsWUFBWTtRQUNaLG1CQUFtQjtRQUNuQixXQUFXO0tBQ1osQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBNb2RhbE9wdGlvbnMgfSBmcm9tICcuL21vZGFsLXR5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5Q29uZmlnRGVmYXVsdHMoY29uZmlnOiBNb2RhbE9wdGlvbnMsIGRlZmF1bHRPcHRpb25zOiBNb2RhbE9wdGlvbnMpOiBNb2RhbE9wdGlvbnMge1xuICByZXR1cm4geyAuLi5kZWZhdWx0T3B0aW9ucywgLi4uY29uZmlnIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWx1ZVdpdGhDb25maWc8VD4oXG4gIHVzZXJWYWx1ZTogVCB8IHVuZGVmaW5lZCxcbiAgY29uZmlnVmFsdWU6IFQgfCB1bmRlZmluZWQsXG4gIGRlZmF1bHRWYWx1ZTogVFxuKTogVCB8IHVuZGVmaW5lZCB7XG4gIHJldHVybiB0eXBlb2YgdXNlclZhbHVlID09PSAndW5kZWZpbmVkJ1xuICAgID8gdHlwZW9mIGNvbmZpZ1ZhbHVlID09PSAndW5kZWZpbmVkJ1xuICAgICAgPyBkZWZhdWx0VmFsdWVcbiAgICAgIDogY29uZmlnVmFsdWVcbiAgICA6IHVzZXJWYWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbmZpZ0Zyb21Db21wb25lbnQ8VCBleHRlbmRzIE1vZGFsT3B0aW9ucz4oY29tcG9uZW50OiBUKTogTW9kYWxPcHRpb25zIHtcbiAgY29uc3Qge1xuICAgIG56Q2VudGVyZWQsXG4gICAgbnpNYXNrLFxuICAgIG56TWFza0Nsb3NhYmxlLFxuICAgIG56Q2xvc2FibGUsXG4gICAgbnpPa0xvYWRpbmcsXG4gICAgbnpPa0Rpc2FibGVkLFxuICAgIG56Q2FuY2VsRGlzYWJsZWQsXG4gICAgbnpDYW5jZWxMb2FkaW5nLFxuICAgIG56S2V5Ym9hcmQsXG4gICAgbnpOb0FuaW1hdGlvbixcbiAgICBuekNvbnRlbnQsXG4gICAgbnpGb290ZXIsXG4gICAgbnpaSW5kZXgsXG4gICAgbnpXaWR0aCxcbiAgICBueldyYXBDbGFzc05hbWUsXG4gICAgbnpDbGFzc05hbWUsXG4gICAgbnpTdHlsZSxcbiAgICBuelRpdGxlLFxuICAgIG56Q2xvc2VJY29uLFxuICAgIG56TWFza1N0eWxlLFxuICAgIG56Qm9keVN0eWxlLFxuICAgIG56T2tUZXh0LFxuICAgIG56Q2FuY2VsVGV4dCxcbiAgICBuek9rVHlwZSxcbiAgICBuek9rRGFuZ2VyLFxuICAgIG56SWNvblR5cGUsXG4gICAgbnpNb2RhbFR5cGUsXG4gICAgbnpPbk9rLFxuICAgIG56T25DYW5jZWwsXG4gICAgbnpBZnRlck9wZW4sXG4gICAgbnpBZnRlckNsb3NlLFxuICAgIG56Q2xvc2VPbk5hdmlnYXRpb24sXG4gICAgbnpBdXRvZm9jdXNcbiAgfSA9IGNvbXBvbmVudDtcbiAgcmV0dXJuIHtcbiAgICBuekNlbnRlcmVkLFxuICAgIG56TWFzayxcbiAgICBuek1hc2tDbG9zYWJsZSxcbiAgICBuekNsb3NhYmxlLFxuICAgIG56T2tMb2FkaW5nLFxuICAgIG56T2tEaXNhYmxlZCxcbiAgICBuekNhbmNlbERpc2FibGVkLFxuICAgIG56Q2FuY2VsTG9hZGluZyxcbiAgICBuektleWJvYXJkLFxuICAgIG56Tm9BbmltYXRpb24sXG4gICAgbnpDb250ZW50LFxuICAgIG56Rm9vdGVyLFxuICAgIG56WkluZGV4LFxuICAgIG56V2lkdGgsXG4gICAgbnpXcmFwQ2xhc3NOYW1lLFxuICAgIG56Q2xhc3NOYW1lLFxuICAgIG56U3R5bGUsXG4gICAgbnpUaXRsZSxcbiAgICBuekNsb3NlSWNvbixcbiAgICBuek1hc2tTdHlsZSxcbiAgICBuekJvZHlTdHlsZSxcbiAgICBuek9rVGV4dCxcbiAgICBuekNhbmNlbFRleHQsXG4gICAgbnpPa1R5cGUsXG4gICAgbnpPa0RhbmdlcixcbiAgICBuekljb25UeXBlLFxuICAgIG56TW9kYWxUeXBlLFxuICAgIG56T25PayxcbiAgICBuek9uQ2FuY2VsLFxuICAgIG56QWZ0ZXJPcGVuLFxuICAgIG56QWZ0ZXJDbG9zZSxcbiAgICBuekNsb3NlT25OYXZpZ2F0aW9uLFxuICAgIG56QXV0b2ZvY3VzXG4gIH07XG59XG4iXX0=